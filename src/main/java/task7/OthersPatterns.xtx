Типы паттернов: 1 - порождающие
                2 - структурные
                3 - поведенческие

Порождающие:
1)Singleton (Одиночка) - ограничивает создание одного экземпляра класса, обеспечивает доступ к его единственному объекту.

2)Factory (Фабрика) - используется, когда у нас есть суперкласс с несколькими подклассами и на основе ввода,
нам нужно вернуть один из подкласса.

3)Abstract Factory (Абстрактная фабрика) - используем супер фабрику для создания фабрики,
затем используем созданную фабрику для создания объектов.

4)Builder (Строитель) - используется для создания сложного объекта с использованием простых объектов.
Постепенно он создает больший объект от малого и простого объекта.

5)Prototype (Прототип) - помогает создать дублированный объект с лучшей производительностью,
вместо нового создается возвращаемый клон существующего объекта.

Структурные:
1)Adapter (Адаптер) - это конвертер между двумя несовместимыми объектами.
Используя паттерн адаптера, мы можем объединить два несовместимых интерфейса.

2)Composite (Компоновщик) - использует один класс для представления древовидной структуры.

3)Proxy (Заместитель) - представляет функциональность другого класса.

4)Flyweight (Легковес) - вместо создания большого количества похожих объектов, объекты используются повторно.

5)Facade (Фасад) - беспечивает простой интерфейс для клиента, и клиент использует интерфейс для взаимодействия с системой.

6)Bridge (Мост) - делает конкретные классы независимыми от классов реализации интерфейса.

7)Decorator (Декоратор) - добавляет новые функциональные возможности существующего объекта без привязки его структуры.

Поведенческие:
1)Template Method (Шаблонный метод) - определяющий основу алгоритма и позволяющий наследникам переопределять некоторые шаги алгоритма,
не изменяя его структуру в целом.

2)Mediator (Посредник) - предоставляет класс посредника, который обрабатывает все коммуникации между различными классами.

3)Chain of Responsibility (Цепочка обязанностей) - позволяет избежать жесткой зависимости отправителя запроса от его получателя,
при этом запрос может быть обработан несколькими объектами.

4)Observer (Наблюдатель) - позволяет одним обьектам следить и реагировать на события, происходящие в других объектах.

5)Strategy (Стратегия) - алгоритм стратегии может быть изменен во время выполнения программы.

6)Command (Команда) - интерфейс команды объявляет метод для выполнения определенного действия.

7)State (Состояние) - объект может изменять свое поведение в зависимости от его состояния.

8)Visitor (Посетитель) - используется для упрощения операций над группировками связанных объектов.

9)Interpreter (Интерпретатор) - определяет грамматику простого языка для проблемной области.

10)Iterator (Итератор) - последовательно осуществляет доступ к элементам объекта коллекции, не зная его основного представления.

11)Memento (Хранитель) - используется для хранения состояния объекта, позже это состояние можно восстановить.